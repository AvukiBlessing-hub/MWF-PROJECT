const express = require("express");
const router = express.Router();
const { ensureAuthenticated, ensureManager } = require("../middleware/auth");
const moment = require("moment");

const DeliveryModel = require("../models/deliveryModel");

// ================= Show Delivery Page =================
router.get("/delivery", ensureAuthenticated, ensureManager, (req, res) => {
  res.render("delivery", { title: "Delivery Page" });
});

// ================= Handle Delivery Submission =================
router.post("/delivery", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    const {
      customerName,
      customerAddress,
      productName,
      quantity,
      paymentType,
      basePrice,
      transport,
      deliveryStatus,
    } = req.body;

    const base = Number(basePrice) || 0;
    const qty = Number(quantity) || 1;
    const hasTransport = transport === "on" || transport === true;

    const transportFee = hasTransport ? base * 0.05 : 0;
    const totalPrice = (base + transportFee) * qty;

    const delivery = new DeliveryModel({
      customerName,
      customerAddress,
      productName,
      quantity: qty,
      paymentType,
      basePrice: base,
      transport: hasTransport,
      totalPrice,
      deliveryStatus,
    });

    await delivery.save();
    console.log("Delivery saved:", delivery);
    res.redirect("/deliverylist");
  } catch (error) {
    console.error("Error saving delivery:", error.message);
    res.redirect("/delivery");
  }
});

// ================= Get Delivery List =================
router.get("/deliverylist", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    const deliveries = await DeliveryModel.find().sort({ $natural: -1 });
    res.render("deliverytable", { deliveries, moment });
  } catch (error) {
    console.error("Error fetching deliveries:", error.message);
    res.status(400).send("Unable to get data from the database.");
  }
});

// ================= Dashboard =================
router.get("/dashboard", ensureAuthenticated, ensureManager, (req, res) => {
  res.render("dashboard", { title: "Dashboard Page" });
});

// ================= Edit Delivery =================
router.get("/editdelivery/:id", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    const delivery = await DeliveryModel.findById(req.params.id);
    if (!delivery) return res.status(404).send("Delivery not found");
    res.render("editdelivery", { delivery });
  } catch (error) {
    console.error(error);
    res.status(500).send("Error loading edit form");
  }
});

router.post("/editdelivery/:id", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    const updatedDelivery = await DeliveryModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedDelivery) return res.status(404).send("Delivery not found");
    res.redirect("/deliverylist");
  } catch (error) {
    console.error(error);
    res.status(500).send("Error updating delivery");
  }
});

// ================= Delete Delivery =================
router.post("/deletedelivery", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    await DeliveryModel.deleteOne({ _id: req.body.id });
    res.redirect("/deliverylist");
  } catch (error) {
    console.error(error.message);
    res.status(400).send("Unable to delete delivery from the database.");
  }
});

module.exports = router;
